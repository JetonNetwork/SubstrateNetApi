//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SubstrateNetApi.Model.Calls;
using SubstrateNetApi.Model.Custom.Runtime;
using SubstrateNetApi.Model.Types.Base;
using SubstrateNetApi.Model.Types.Composite;
using SubstrateNetApi.Model.Types.Enum;
using SubstrateNetApi.Model.Types.Primitive;
using SubstrateNetApi.Model.Types.Sequence;
using System;
using System.Collections.Generic;


namespace SubstrateNetApi.Model.Custom.Calls
{
    
    
    /// <summary>
    /// >> Path: pallet_scheduler.pallet.Call
    /// Contains one variant per dispatchable that can be called by an extrinsic.
    /// </summary>
    public sealed class PalletScheduler
    {
        
        /// <summary>
        /// >> Extrinsic: schedule
        /// Anonymously schedule a task.
        /// 
        /// # <weight>
        /// - S = Number of already scheduled calls
        /// - Base Weight: 22.29 + .126 * S ��s
        /// - DB Weight:
        ///     - Read: Agenda
        ///     - Write: Agenda
        /// - Will use base weight of 25 which should be good for up to 30 scheduled calls
        /// # </weight>
        /// </summary>
        public GenericExtrinsicCall Schedule(U32 when, BaseOpt<BaseTuple<U32,U32>> maybe_periodic, U8 priority, EnumNodeCall call)
        {
            return new GenericExtrinsicCall("Scheduler", "schedule", when, maybe_periodic, priority, call);
        }
        
        /// <summary>
        /// >> Extrinsic: cancel
        /// Cancel an anonymously scheduled task.
        /// 
        /// # <weight>
        /// - S = Number of already scheduled calls
        /// - Base Weight: 22.15 + 2.869 * S ��s
        /// - DB Weight:
        ///     - Read: Agenda
        ///     - Write: Agenda, Lookup
        /// - Will use base weight of 100 which should be good for up to 30 scheduled calls
        /// # </weight>
        /// </summary>
        public GenericExtrinsicCall Cancel(U32 when, U32 index)
        {
            return new GenericExtrinsicCall("Scheduler", "cancel", when, index);
        }
        
        /// <summary>
        /// >> Extrinsic: schedule_named
        /// Schedule a named task.
        /// 
        /// # <weight>
        /// - S = Number of already scheduled calls
        /// - Base Weight: 29.6 + .159 * S ��s
        /// - DB Weight:
        ///     - Read: Agenda, Lookup
        ///     - Write: Agenda, Lookup
        /// - Will use base weight of 35 which should be good for more than 30 scheduled calls
        /// # </weight>
        /// </summary>
        public GenericExtrinsicCall ScheduleNamed(BaseVec<U8> id, U32 when, BaseOpt<BaseTuple<U32,U32>> maybe_periodic, U8 priority, EnumNodeCall call)
        {
            return new GenericExtrinsicCall("Scheduler", "schedule_named", id, when, maybe_periodic, priority, call);
        }
        
        /// <summary>
        /// >> Extrinsic: cancel_named
        /// Cancel a named scheduled task.
        /// 
        /// # <weight>
        /// - S = Number of already scheduled calls
        /// - Base Weight: 24.91 + 2.907 * S ��s
        /// - DB Weight:
        ///     - Read: Agenda, Lookup
        ///     - Write: Agenda, Lookup
        /// - Will use base weight of 100 which should be good for up to 30 scheduled calls
        /// # </weight>
        /// </summary>
        public GenericExtrinsicCall CancelNamed(BaseVec<U8> id)
        {
            return new GenericExtrinsicCall("Scheduler", "cancel_named", id);
        }
        
        /// <summary>
        /// >> Extrinsic: schedule_after
        /// Anonymously schedule a task after a delay.
        /// 
        /// # <weight>
        /// Same as [`schedule`].
        /// # </weight>
        /// </summary>
        public GenericExtrinsicCall ScheduleAfter(U32 after, BaseOpt<BaseTuple<U32,U32>> maybe_periodic, U8 priority, EnumNodeCall call)
        {
            return new GenericExtrinsicCall("Scheduler", "schedule_after", after, maybe_periodic, priority, call);
        }
        
        /// <summary>
        /// >> Extrinsic: schedule_named_after
        /// Schedule a named task after a delay.
        /// 
        /// # <weight>
        /// Same as [`schedule_named`](Self::schedule_named).
        /// # </weight>
        /// </summary>
        public GenericExtrinsicCall ScheduleNamedAfter(BaseVec<U8> id, U32 after, BaseOpt<BaseTuple<U32,U32>> maybe_periodic, U8 priority, EnumNodeCall call)
        {
            return new GenericExtrinsicCall("Scheduler", "schedule_named_after", id, after, maybe_periodic, priority, call);
        }
    }
}
